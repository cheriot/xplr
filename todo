
Up next
* why is the destination page not isomorphic?
* only show places with content
  * publish places more selectively?
* merge places: whitsunday island
* make the highlighted marker bounce when clicked
* improve handling of places with no content
  * show content for places on the map
  * make sure the map includes the nearest place
* needed? https://github.com/googlemaps/js-marker-clusterer
* crawl sites
  * https://github.com/cgiffard/node-simplecrawler
  * cheerio for html parsing

Prototype Questions
* Are these travel articles actually helpful?
  * Use all from http://www.theexpeditioner.com/the-top-50-travel-blogs/
  * http://www.48houradventure.com/
  * http://wanderingtrader.com/
  * http://migrationology.com/blog/
  * http://www.wisebread.com/travel-resources

* Are bloggers interested?
  * "find older content" http://www.nomadicmatt.com/travel-blogs/survey-feedback/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+MattsTravelSite+%28Matt%27s+Travel+Log%29

* email/social only blogs
  * http://www.ourawesomeplanet.com/
  * http://www.joaoleitao.com/
* broken feeds
  * http://thesavvybackpacker.com/
  * http://freeyourmindtravel.com/
* single city sites
  * http://www.eatingthaifood.com
  * http://istanbuleats.com/
* city guides
  * http://eatyourworld.com/
  * http://travelsofadam.com/city-guides/manchester/
* existing guides with *some* good content
  * http://www.roughguides.com/article/taiwan-street-food/
* extensive niche guides
  * seat61.com

Design for each api method:
* render react markup
* actions, instead of requesting data, record in a global store the data needed
* on the client, make a bulk request
* on the server, trigger bulk request handler

Challenges:
* how to reach into Alt's state on the server?
* how to run something after all components have rendered?

quicker, easier, option:
* use a page component to handle/make the only data requst
* the server responds with the extended message format
* stores are populated and subsequent actions return data immediately

Challenges:
* how to get a store to check all requests from all requests?

Message format
{
  lists: {
    feeds: [ids],
    feed_entry_queue: [ids]
  },
  entities: {
    feeds: {id: entity},
    feed_entries: {id, entity}
  },
  associations: {
    feeds_feed_entries: {
      feed_id: [ids]
    }
  }
}

As needed
* do i need elastic for any of this?
* consolidate configuration with https://github.com/indexzero/nconf
* logging
* bookends for associations: http://city41.github.io/bookends/demo.html

favicon is in 32b82e from http://www.favicon.cc/
